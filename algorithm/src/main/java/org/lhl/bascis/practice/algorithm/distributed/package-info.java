/**
 * 分布式算法.
 */

/**
 * paxos 算法解析.
 *
 *
 *1.提议者相接受者发起提议申请
 *   1.1 接受者没有接受过提议
 *     1.1.1 接受者没有接受过申请 接受者给提议者反馈接受提议者的申请
 *     1.1.2 接受者接受过申请
 *       1.1.2.1  接受的申请版本比提议者的版本低 接受着给提议者反馈接受提议者的申请
 *       1.1.2.2  接受的申请版本比提议者的版本高 接受者给提议者反馈拒绝提议者的申请
 *   1.2 接受者已经接受过提议
 *      1.2.1 接受的提议版本不是过半多数的
 *         1.2.1.1 接受者的提议的版本 比自己的提议版本低 向 其他接受者 提议 自己的提议版本
 *            1.2.1.1.1 剩下 所有接受者发起提议
 *              1.2.1.1.1.1 如果 1.2.2
 *              1.2.1.1.1.2 否则 1.1.2.1
 *         1.2.1.1 接受者的提议的版本 比自己的提议版本高 向 其他接受者 提议 接受者接受的提议版本
 *              1.2.1.1.1.1 如果 1.2.2
 *              1.2.1.1.1.2 否则 1.1.2.1
 *      1.2.2 接受的提议版本是过半多数的 提议者将 自己的提议 替换为 已经是过半多数的提议版本 给其他接受者 提议为 过半多数的版本
 *
 *
 *
 * 2.paxos 会出现活锁问题 主要集中在 上文 没有决定出过多版本 而 重复多次发起 申请的问题
 *
 * 解决方法 是 提议者选取出leader 由 leader 对外统一发布提议
 *
 * 待解决问题 ？
 * =================================
 * 选取leader 后 对外发布问题的逻辑 ？
 *  1. 对外发布所有提议者提出的提议
 *  2. 对外发布多数提议者同意的提议
 *  3. 对外发布最新的(版本号最大的)提议
 * =================================
 */
package org.lhl.bascis.practice.algorithm.distributed;
